import streamlit as st
import pandas as pd
import numpy as np
import joblib
import pickle
import matplotlib.pyplot as plt
import seaborn as sns
from xgboost import XGBRegressor
from PIL import Image
import base64
import matplotlib.dates as mdates
import io
import warnings

# D√©sactiver les avertissements
warnings.filterwarnings("ignore")


# Configuration de la page en mode large
st.set_page_config(page_title="üîç Pr√©diction de la Consommation d'√ânergie BOIRY", layout="wide")

# Fonction pour ajouter une image en arri√®re-plan via CSS
def add_bg_from_local(image_file):
    with open(image_file, "rb") as image:
        encoded_image = base64.b64encode(image.read()).decode()
        st.markdown(
            f"""
            <style>
            .stApp {{
                background-image: url("data:image/png;base64,{encoded_image}");
                background-size: cover;
                background-position: center;
                background-repeat: no-repeat;
            }}
            </style>
            """,
            unsafe_allow_html=True
        )

# Ajouter l'image en arri√®re-plan
add_bg_from_local('interface.jpg')

# Convertir un DataFrame en fichier Excel pour t√©l√©chargement
def convert_df_to_excel(df):
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df.to_excel(writer, index=True, sheet_name='Pr√©dictions')
    output.seek(0)
    return output.read()

def load_and_process_data(xls):
    """
    Charge les donn√©es depuis un fichier Excel, les concat√®ne en un seul DataFrame,
    supprime les doublons par date, et remplit les valeurs manquantes.
    Param√®tres:
    - file_path : str : chemin vers le fichier Excel √† charger
    Retour:
    - DataFrame : DataFrame avec les donn√©es trait√©es
    """

    # Concat√©ner toutes les feuilles en un seul DataFrame
    df_all = pd.concat(
        [pd.read_excel(xls, sheet_name=sheet, parse_dates=['Date']).set_index('Date') for sheet in xls.sheet_names],
        axis=1
    )

    # Supprimer les doublons sur l'index 'Date'
    df_all= df_all[~df_all.index.duplicated(keep='first')]

    # Remplir les valeurs manquantes
    df_all = df_all.fillna(method='ffill').fillna(method='bfill')
    df_all.columns = df_all.columns.str.split(" - ", n=1).str[-1]

    # Remettre l'index 'Date' en colonne
    df_all= df_all.reset_index()
    #st.dataframe(df_all)
    return df_all

# Traitement des donn√©es de Boiry
def process_boiry_data(df_boiry):
    def moyenne_pond√©r√©e(valeur_1, valeur_2, poid_1, poid_2):
        return (valeur_1 * poid_1 + valeur_2 * poid_2) / (poid_1 + poid_2)

    # V√©rification et cr√©ation des nouvelles colonnes
    colonnes_attendues = [#"Soutirage 9m", 
                          #"Soutirage 11m", 
                          #"Temp entr√©e JAE A", 
                          #"Temp entr√©e JAE B",
                          #"D√©bit JAE A", 
                          #"D√©bit JAE B", 
                          #"Temp sortie JAE A", 
                          #"Temp sortie JAE B",
                          "Temps fum√©es 140T", 
                          "Temp fum√©es 120T", 
                          #"D√©bit gaz 140T", 
                          #"D√©bit gaz 120T",
                          "D√©bit eau 140T", "D√©bit eau 120T", "D√©bit vapeur 140T", "D√©bit vapeur 120T"]

    # V√©rifier la pr√©sence des colonnes
    #colonnes_manquantes = [col for col in colonnes_attendues if col not in df_boiry.columns]
    #if colonnes_manquantes:
        #st.warning(f"‚ö†Ô∏è Colonnes manquantes dans le fichier : {', '.join(colonnes_manquantes)}")

    # Ajout des colonnes calcul√©es
    #if "Soutirage 9m" in df_boiry.columns and "Soutirage 11m" in df_boiry.columns:
        #df_boiry['Soutirage_tot'] = df_boiry["Soutirage 9m"] + df_boiry["Soutirage 11m"]

    #if all(col in df_boiry.columns for col in ["Temp entr√©e JAE A", "Temp entr√©e JAE B", "D√©bit JAE A", "D√©bit JAE B"]):
        #df_boiry['Temp entr√©e JAE_moy'] = df_boiry.apply(lambda row: moyenne_pond√©r√©e(row['Temp entr√©e JAE A'], row['Temp entr√©e JAE B'], row['D√©bit JAE A'], row['D√©bit JAE B']), axis=1)

    #if all(col in df_boiry.columns for col in ["Temp sortie JAE A", "Temp sortie JAE B", "D√©bit JAE A", "D√©bit JAE B"]):
        #df_boiry['Temp sortie JAE_moy'] = df_boiry.apply(lambda row: moyenne_pond√©r√©e(row['Temp sortie JAE A'], row['Temp sortie JAE B'], row['D√©bit JAE A'], row['D√©bit JAE B']), axis=1)

    #if all(col in df_boiry.columns for col in ["D√©bit JAE A", "D√©bit JAE B"]):
        #df_boiry['D√©bit JAE_tot'] = df_boiry['D√©bit JAE A'] + df_boiry['D√©bit JAE B']

    if all(col in df_boiry.columns for col in ["Temps fum√©es 140T", "Temp fum√©es 120T", "D√©bit gaz 140T", "D√©bit gaz 120T"]):
        df_boiry['Temp fum√©e_moy'] = df_boiry.apply(lambda row: moyenne_pond√©r√©e(row['Temps fum√©es 140T'], row['Temp fum√©es 120T'], row['D√©bit gaz 140T'], row['D√©bit gaz 120T']), axis=1)

    #if "D√©bit eau 140T" in df_boiry.columns and "D√©bit eau 120T" in df_boiry.columns:
        #df_boiry['D√©bit eau_tot'] = df_boiry['D√©bit eau 140T'] + df_boiry['D√©bit eau 120T']

    if "D√©bit vapeur 140T" in df_boiry.columns and "D√©bit vapeur 120T" in df_boiry.columns:
        df_boiry['D√©bit vapeur_tot'] = df_boiry['D√©bit vapeur 140T'] + df_boiry['D√©bit vapeur 120T']

    #st.dataframe(df_boiry)
    # S√©lection des colonnes moyenn√©es
    data_boiry= df_boiry[['Date','Tonnage', 'Temp√©rature','D√©bit JC1','Pression VE','D√©bit sucre', 'Richesse cossettes - BOI & ART (g%g)','JAE - Brix poids (g%g)','Sirop sortie √©vapo-Brix poids (g%g)', 'D√©bit vapeur_tot', 'Temp fum√©e_moy']]

    #data_boiry= df_boiry[['Date','Tonnage', 'Temp√©rature', 'Soutirage_tot', 'Temp jus TEJC',
       #'D√©bit jus chaul√©', 'Temp jus chaul√©', 'D√©bit JC1', 'Temp JC1 ech 1',
       #'Temp JC1 ech 2', '% condenseur', 'Temp entr√©e JAE_moy',
       #'Temp sortie JAE_moy', 'D√©bit JAE_tot', 'D√©bit sirop 5C',
       #'D√©bit sirop stock√©', 'Pression VE', 'D√©bit SBP', 'D√©bit refonte',
       #'D√©bit sucre', 'Richesse cossettes - BOI & ART (g%g)',
       #'JAE - Brix poids (g%g)', 'Sirop sortie √©vapo-Brix poids (g%g)',
       #'LS1 - Brix poids (g%g)', 'LS1 concentr√©e - Brix poids (g%g)',
       #'SBP - Brix (g%g)', 'SBP instantan√© - Brix (g%g)',
       #'D√©bit eau_tot', 'D√©bit vapeur_tot', 'Temp fum√©e_moy']]

    #df_boiry['Temp fum√©e_moy'] = df_boiry['Temp fum√©e_moy']
    
    #df_boiry['Energie kWh 0¬∞C_pci'] = df_boiry['Energie KWh 0¬∞C'] * 0.9
    #df_boiry['Conso NRJ Usine (kwh/tcossette)'] = df_boiry['Energie kWh 0¬∞C_pci'] / df_boiry['Tonnage']
    
    #df_boiry.reset_index(drop=True, inplace=True)

    # Ajout des donn√©es de la chaufferie
    #df_boiry['Temp fum√©e_moy'] = df_boiry['Temp fum√©e_moy']
    #df_boiry.reset_index(drop=True, inplace=True)

    return data_boiry

# Chargement du mod√®le et pr√©diction
def process_and_predict(input_data, df_lim, model_path, scaler_path):
    model = joblib.load(model_path)
    with open(scaler_path, "rb") as f:
        scaler = pickle.load(f)
    
    data_test = process_boiry_data(input_data)
    data_test["Date"] = pd.to_datetime(data_test["Date"])
    data_test.set_index("Date", inplace=True)
    data_test = data_test[df_lim.columns.intersection(data_test.columns)]
    
    valeurs_hors_limites = {}
    for col in data_test.columns:
        if col in df_lim.columns:
            valeurs_hors_min = (data_test[col] < df_lim.loc['min', col]).sum()
            valeurs_hors_max = (data_test[col] > df_lim.loc['max', col]).sum()
            if valeurs_hors_min > 0 or valeurs_hors_max > 0:
                valeurs_hors_limites[col] = (valeurs_hors_min, valeurs_hors_max)
    
    for col in data_test.columns:
        if col in df_lim.columns:
            data_test = data_test[(data_test[col] >= df_lim.loc['min', col]) & (data_test[col] <= df_lim.loc['max', col])]
    
    variables = data_test
    X_scaled = scaler.transform(variables)
    predictions = model.predict(X_scaled)
    df_pred = pd.DataFrame(predictions, columns=["Pr√©dictions"], index= variables.index)
    df_test = pd.concat([variables, df_pred], axis=1)
    
    return df_test, variables

# Ajout d'un panneau lat√©ral
st.sidebar.title("üîç Entrainement Analyse et Pr√©diction")

# T√©l√©chargement du fichier Excel
uploaded_file = st.sidebar.file_uploader("üìÇ T√©l√©chargez votre fichier Excel", type=["xlsx"])


# Titre de l'application
#st.title("Pr√©diction & Analyse de la Consommation d'√ânergie BOIRY")
#st.markdown("""<h2 style="text-align: center; font-size: 42px;">PREDICTION ET ANALYSE DE LA CONSOMMATION ENERGETIQUE A TEREOS BOIRY</h2>""", unsafe_allow_html=True)
st.markdown("<h1 style='text-align: center; color: #003366;;'>PR√âDICTION & ANALYSE DE LA CONSOMMATION √âNERG√âTIQUE ‚Äì TEREOS BOIRY</h1>", unsafe_allow_html=True)

if uploaded_file is not None:

    model_path = "xgb_model_cb22-23-24_10_param.joblib"
    scaler_path = "scaler_cb22-23-24_10_param.pkl"
    #target_column = "Conso NRJ Usine (kwh/tcossette)"

    df_lim = pd.DataFrame({
        "Tonnage": [500, 900], "Temp√©rature": [-2, 50],
        "Richesse cossettes - BOI & ART (g%g)": [14, 20], "D√©bit JC1": [650, 1250],
        "Pression VE": [2, 3.4], "JAE - Brix poids (g%g)": [11, 20],
        "Sirop sortie √©vapo-Brix poids (g%g)": [60, 80], "D√©bit sucre": [40, 136],
        "D√©bit vapeur_tot": [140, 200], "Temp fum√©e_moy": [80, 174]
    }, index=["min", "max"])
    
    # Charger l'instance ExcelFile
    xls = pd.ExcelFile(uploaded_file)

    # Extraire les donn√©es
    df_boiry = load_and_process_data(xls)
    #st.dataframe(df_boiry)
    # traitement des donn√©es
    data_boiry = process_boiry_data(df_boiry)
    #st.dataframe(data_boiry)
    
    df_results, variables = process_and_predict(df_boiry, df_lim, model_path, scaler_path)
    df_results.index = pd.to_datetime(df_results.index, errors='coerce')
    st.sidebar.success("‚úÖ Exploration et traitement des donn√©es effectu√©s avec succ√®s !")
    st.dataframe(df_results)
    st.write(df_results.info())
    # Extraction de la date et de l'heure
    df_results.reset_index(inplace=True)  # R√©int√©grer "DateHeure" en colonne
    df_results["Date"] =  df_results["Date"].dt.date
    df_results["Heure"] =  df_results["Date"].dt.strftime("%H:%M")

    # S√©lection de la p√©riode (jours et heures)
    min_date =  df_results["Date"].min()
    max_date =  df_results["Date"].max()

    start_date = st.sidebar.date_input("üìÖ Date de d√©but", min_value=min_date, max_value=max_date, value=min_date)
    end_date = st.sidebar.date_input("üìÖ Date de fin", min_value=min_date, max_value=max_date, value=max_date)

    # S√©lection de l'heure de d√©but et fin
    start_time = st.sidebar.time_input("‚è∞ Heure de d√©but", value=pd.to_datetime("00:00").time())
    end_time = st.sidebar.time_input("‚è∞ Heure de fin", value=pd.to_datetime("23:59").time())

    # Filtrer les donn√©es en fonction des dates et heures s√©lectionn√©es
    df_results =  df_results[
        ( df_results["Date"] >= start_date) & ( df_results["Date"] <= end_date) &
        ( df_results["DateHeure"].dt.time >= start_time) & ( df_results["DateHeure"].dt.time <= end_time)
    ]

    st.sidebar.success(f"üìà Donn√©es filtr√©es du **{start_date} {start_time}** au **{end_date} {end_time}**")
    
    # Input pour d√©finir l'objectif
    objectif = st.sidebar.number_input("üî¢ Entrez l'objectif de consommation √©nerg√©tique (kWh)", min_value=100, max_value=250)
    prix_gn = st.sidebar.number_input("üî¢ Entrez l'objectif le prix du Mwh Gaz Naturel (‚Ç¨/MWh)", min_value=0, max_value=250)
    #df_results, variables = process_and_predict(data_boiry, df_lim, model_path, scaler_path)
    if st.sidebar.button("üöÄ Lancer la pr√©diction"):
        with st.spinner("üìä Calcul en cours..."):
                 
            #df_results, variables = process_and_predict(data_boiry, df_lim, model_path, scaler_path, target_column)
            if df_results is not None:
                
                st.sidebar.success("‚úÖ Pr√©dictions termin√©es !")
                
    page = st.sidebar.radio("S√©lectionnez une page :", ["üìà Tableau de Bord", "üì• T√©l√©charger"])
    
    if page == "üìà Tableau de Bord":
        
        col1, col2, = st.columns([3, 2.5]) # 2 colonnes avec un ratio de largeur
          
        with col1:
            #st.header("üìä Pr√©diction & Analyse ")
            st.markdown("<h1 style='text-align: center; color: #003366; font-size: 28px;'>üìä Pr√©diction & Analyse</h1>", unsafe_allow_html=True)
        
            # Affichage des statistiques
            #moyenne = df_results["Pr√©dictions"].mean()
            #mediane = df_results["Pr√©dictions"].median()
            #ecart_type = df_results["Pr√©dictions"].std()
            #st.write(f"**Moyenne:** {moyenne:.2f} kWh")
            #st.write(f"**M√©diane:** {mediane:.2f} kWh")
            #st.write(f"**√âcart-type:** {ecart_type:.2f} kWh")

            # Plotting the predictions
            fig, ax = plt.subplots(figsize=(20, 10), dpi=100)
            mean = df_results["Pr√©dictions"].mean()
            std_dev = df_results["Pr√©dictions"].std()
            upper_limit = mean + 2 * std_dev
            lower_limit = mean - 2 * std_dev
    
            # Cr√©ation d'un masque bool√©en pour les segments au-dessus et en dessous de l'objectif
            au_dessus = df_results["Pr√©dictions"] > objectif
            en_dessous = df_results["Pr√©dictions"] < objectif
            
            # Tracer la ligne horizontale de l'objectif
            ax.axhline(y=objectif, color="red", linestyle="-", linewidth=4, label=f'Objectif : {objectif} kWh')
            
            # Tracer les points en rouge s'ils sont au-dessus de l'objectif
            ax.scatter(df_results["DateHeure"][au_dessus], df_results["Pr√©dictions"][au_dessus], color="red", label="Au-dessus de l'objectif", zorder=3)

            # Tracer les points en rouge s'ils sont en-dessous de l'objectif
            ax.scatter(df_results["DateHeure"][en_dessous], df_results["Pr√©dictions"][en_dessous], color="green", label="En-dessous de l'objectif", zorder=3)
            
            # Tracer les lignes horizontales des limites
            ax.axhline(upper_limit, color="red", linestyle="dashed", linewidth=2, label=f"Mean + 2œÉ = {upper_limit:.2f}")
            ax.axhline(lower_limit, color="green", linestyle="dashed", linewidth=2, label=f"Mean - 2œÉ = {lower_limit:.2f}")
            
            ax.plot(df_results["DateHeure"], df_results["Pr√©dictions"], color="blue", alpha=1)
            
            ax.set_title("Pr√©diction CB24")
            ax.set_xlabel("Date")
            ax.set_ylabel("Conso NRJ (kWh/tcossette)")
            ax.legend()
            ax.grid(True)
            # Formatage de l'axe des dates pour afficher date + heure
            ax.xaxis.set_major_formatter(mdates.DateFormatter("%Y-%m-%d %H:%M"))  # Affichage complet
            # Inclinaison des √©tiquettes de l'axe des X
            plt.xticks(rotation=45)  # Rotation des dates
            st.pyplot(fig, use_container_width=False)

            # V√©rifier que la colonne "Pr√©dictions" existe
            if "Pr√©dictions" in df_results.columns:
                # Calcul des statistiques
                moyenne = df_results["Pr√©dictions"].mean()
                mediane = df_results["Pr√©dictions"].median()
                ecart_type = df_results["Pr√©dictions"].std()
                
                # Affichage des statistiques
                #st.write(f"**Moyenne:** {moyenne:.2f} kWh")
                #st.write(f"**M√©diane:** {mediane:.2f} kWh")
                #st.write(f"**√âcart-type:** {ecart_type:.2f} kWh")
                
                # Tracer l'histogramme avec KDE
                fig, ax = plt.subplots(figsize=(20, 10))
                sns.histplot(df_results["Pr√©dictions"], bins=25, kde=True, color='blue', ax=ax)
                
                # Ajouter les statistiques sur le graphique
                ax.axvline(moyenne, color='red', linestyle='--', label=f'Moyenne: {moyenne:.2f} kWh')
                ax.axvline(mediane, color='green', linestyle='--', label=f'M√©diane: {mediane:.2f} kWh')
                ax.axvline(moyenne + ecart_type, color='orange', linestyle=':', label=f'√âcart-type: {ecart_type:.2f} kWh')
    
                total = df_results["Pr√©dictions"].shape[0]
                for patch in ax.patches:
                    height = patch.get_height()
                    width = patch.get_width()
                    x_position = patch.get_x() + width / 2
                    percentage = (height / total) * 100
                    if percentage > 0 :
                        ax.text(x_position, height + 0.1, f'{percentage:.1f}%', ha='center', fontsize=14)
                
                # Ajouter des titres et labels
                ax.set_title("Histogramme des Pr√©dictions de Consommation √ânerg√©tique", fontsize=14)
                ax.set_xlabel("Consommation √ânerg√©tique (kWh)", fontsize=12)
                ax.set_ylabel("Densit√©", fontsize=12)
                ax.legend()
                
                # Affichage du graphique dans Streamlit
                st.pyplot(fig,use_container_width=False)
            else:
                st.error("Le fichier ne contient pas de colonne 'Pr√©dictions'. Veuillez v√©rifier vos donn√©es.")

   
                    
        with col2:
            #st.header("üìà Tendances des Variables ")
            st.markdown("<h1 style='text-align: center; color: #003366; font-size: 28px;'>üìà Tendances des Variables</h1>", unsafe_allow_html=True)
            
            # D√©finir 'available_vars' comme √©tant les colonnes du DataFrame df_results
            available_vars = df_results.columns.tolist()
        
            # S√©lection de 2 variables via sidebar
            st.sidebar.header("üîß S√©lection des Variables")
            selected_vars = st.sidebar.multiselect("Choisissez **six** variables :", available_vars, default=available_vars[:6])
            
            # Assurer toujours deux √©l√©ments (None si insuffisants)
            selected_vars = selected_vars[:6] + [None] * (6 - len(selected_vars))
        
            #st.subheader("üìä Tendances des Variables avec Seuils ¬± 3œÉ")
            # Cr√©ation de la figure avec 3 lignes et 2 colonnes
            fig, axes = plt.subplots(3, 2, figsize=(15, 15))  # Hauteur augment√©e pour un meilleur affichage
            axes = axes.flatten()  # Aplatir en 1D pour indexation plus facile
            
            for idx, col in enumerate(selected_vars):
                if col is not None:
                    mean = df_results[col].mean()
                    std_dev = df_results[col].std()
                    upper_limit = mean + 2 * std_dev
                    lower_limit = mean - 2 * std_dev
            
                    axes[idx].plot(df_results["DateHeure"], df_results[col], color="blue", alpha=0.6, label=col)
                    axes[idx].axhline(upper_limit, color="red", linestyle="dashed", linewidth=1, label=f"Mean + 3œÉ = {upper_limit:.2f}")
                    axes[idx].axhline(lower_limit, color="red", linestyle="dashed", linewidth=1, label=f"Mean - 3œÉ = {lower_limit:.2f}")
                    axes[idx].set_title(f"Tendance : {col}")
                    axes[idx].set_xlabel("Date")
                    axes[idx].set_ylabel(col)
                    axes[idx].legend()
                    axes[idx].grid(True)
                    axes[idx].xaxis.set_major_formatter(mdates.DateFormatter("%Y-%m-%d %H:%M"))  # Date + Heure
                    axes[idx].tick_params(axis="x", rotation=45)  # Rotation des dates
                else:
                    st.warning("‚ö†Ô∏è Aucune variable s√©lectionn√©e √† afficher.")

            # Ajustement de la mise en page pour √©viter le chevauchement
            plt.tight_layout()
            st.pyplot(fig, use_container_width=True)

            
            #st.header("üìä Bilan & R√©sultats")
            # Calculer les statistiques descriptives et transformer en DataFrame
            df_stats = df_results["Pr√©dictions"].describe().to_frame().T
            
            # Appliquer du style avec fond blanc sur tout le tableau
            styled_table = df_stats.style \
                .format(precision=2) \
                .set_properties(**{
                    "background-color": "white",  # Fond blanc
                    "color": "black",  # Texte noir
                    "font-weight": "bold",  # Texte en gras
                    "border": "1px solid #ddd",  # Bordures l√©g√®res
                    "text-align": "center",  # Alignement centr√©
                    "width": "100px",  # Largeur contr√¥l√©e
                }) \
                .hide(axis="index") \
                .set_table_styles([
                    {
                        "selector": "thead th",
                        "props": [("background-color", "white"), ("color", "black"), ("font-weight", "bold")]
                    }
                ]) \
                .to_html()
            
            # Affichage dans Streamlit avec une largeur adapt√©e et un fond blanc
            # Afficher les r√©sultats dans un cadre blanc
            st.markdown(
                f"""
                <div style="overflow-x: auto; max-width: 100%; background-color: white; 
                            padding: 10px; border-radius: 5px; margin-bottom: 0px; padding-bottom: 0px;">
                    {styled_table}</div>
                """,
                unsafe_allow_html=True
            )
            
            # Filtrer les lignes o√π "Pr√©dictions" est sup√©rieure √† l'objectif
            df_surco = df_results[df_results["Pr√©dictions"] > objectif].copy()
            # Filtrer les lignes o√π "Pr√©dictions" est inf√©rieure √† l'objectif
            df_sousco = df_results[df_results["Pr√©dictions"] < objectif].copy()
        
            # Calculer la surconsommation d'√©nergie
            df_surco["NRJ_surconsomm√©e"] = abs(df_surco["Pr√©dictions"] - objectif) * df_surco["Tonnage"]
            
            # Calculer la sousconsommation d'√©nergie
            df_sousco["NRJ_sousconsomm√©e"] = abs(df_sousco["Pr√©dictions"] - objectif) * df_sousco["Tonnage"]
            
            # Calculer le total des surconsommations et sousconsommations
            surenergie_totale = df_surco["NRJ_surconsomm√©e"].sum() / 1000
            sousenergie_totale = df_sousco["NRJ_sousconsomm√©e"].sum() / 1000
            
            # Calculer les co√ªts associ√©s
            surcout_totale = (df_surco["NRJ_surconsomm√©e"].sum() / 1000) * prix_gn / 1000
            souscout_totale = (df_sousco["NRJ_sousconsomm√©e"].sum() / 1000) * prix_gn / 1000
            
            # Calcul des totaux nets
            energie_totale = surenergie_totale - sousenergie_totale
            cout_NRJ = surcout_totale - souscout_totale
            
            # Messages √† afficher
            if energie_totale > 0:
                message_5 = f"‚ö° L'√©nergie surconsomm√©e vs l'objectif est : {energie_totale:.2f} MWh üìà"
                message_6 = f"üí∞ Le co√ªt total de sur-consommation d'√©nergie est : {cout_NRJ:.2f} k‚Ç¨ üìà"
            elif energie_totale < 0:
                message_5 = f"‚ö° L'√©nergie sous-consomm√©e vs l'objectif est : {abs(energie_totale):.2f} MWh üìâ"
                message_6 = f"üí∞ Le co√ªt total de sous-consommation d'√©nergie est : {abs(cout_NRJ):.2f} k‚Ç¨ üìâ"
            else:
                message_5 = f"‚ö° L'√©nergie consomm√©e est √©gale √† l'objectif : {energie_totale:.2f} MWh ‚úÖ"
                message_6 = f"üí∞ Le co√ªt total d'√©nergie consomm√©e est √©gale √† l'objectif : {cout_NRJ:.2f} k‚Ç¨ ‚úÖ"
            
            # Afficher les r√©sultats dans un cadre blanc
            st.markdown(f"""
            <div style="background-color: white; padding: 10px; border-radius: 8px; 
                        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);">
                <h3 style="color: #2F4F4F; font-size: 20px;">{message_5} <br><br> {message_6}</h3>
            </div>
            """, unsafe_allow_html=True)

                    
    # --- Page T√©l√©chargement ---
    elif page == "üì• T√©l√©charger":
        st.title("üì• T√©l√©charger les R√©sultats")
    
        # Download button for Excel
        st.download_button(
            label="üíæ T√©l√©charger les r√©sultats",
            data=convert_df_to_excel(df_results),  # Convert the DataFrame to Excel bytes
            file_name="predictions.xlsx",  # File name with .xlsx extension
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"  # MIME type for Excel
        )
        
        # Affichage du DataFrame sous forme de tableau
        st.dataframe(df_results.round(2))  # Afficher df_results en tant que DataFrame

        # Calculer les statistiques descriptives et transformer en DataFrame
        st.dataframe(df_results.describe().round(2))
        
            
