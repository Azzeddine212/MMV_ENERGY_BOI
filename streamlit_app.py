import streamlit as st
import pandas as pd
import numpy as np
import joblib
import pickle
import matplotlib.pyplot as plt
from xgboost import XGBRegressor
import seaborn as sns
import io
import warnings
from PIL import Image
import base64

# D√©sactiver les avertissements
warnings.filterwarnings("ignore")

# Configuration de la page
st.set_page_config(page_title="Tableau de Bord - Pr√©dictions", layout="wide")

# Ajouter l'image en arri√®re-plan via CSS
def add_bg_from_local(image_file):
    with open(image_file, "rb") as image:
        encoded_image = base64.b64encode(image.read()).decode()
        st.markdown(
            f"""
            <style>
            .stApp  {{
                background-image: url("data:image/png;base64,{encoded_image}");
                background-size: cover;
                background-position: center;
                background-repeat: no-repeat;
            }}
            </style>
            """,
            unsafe_allow_html=True
        )

# Ajout de l'image de fond
add_bg_from_local('interface.jpg')

# Fonction de conversion DataFrame en Excel
def convert_df_to_excel(df):
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df.to_excel(writer, index=True, sheet_name='Predictions')
    output.seek(0)
    return output.read()

# Traitement des donn√©es
def process_boiry_data(df_boiry):
    def moyenne_pond√©r√©e(valeur_1, valeur_2, poid_1, poid_2):
        return (valeur_1 * poid_1 + valeur_2 * poid_2) / (poid_1 + poid_2)
    
    df_boiry['Soutirage_tot'] = df_boiry['Soutirage 9m'] + df_boiry['Soutirage 11m']
    df_boiry['Temp entr√©e JAE_moy'] = df_boiry.apply(lambda row: moyenne_pond√©r√©e(row['Temp entr√©e JAE A'], row['Temp entr√©e JAE B'], row['D√©bit JAE A'], row['D√©bit JAE B']), axis=1)
    df_boiry['Temp sortie JAE_moy'] = df_boiry.apply(lambda row: moyenne_pond√©r√©e(row['Temp sortie JAE A'], row['Temp sortie JAE B'], row['D√©bit JAE A'], row['D√©bit JAE B']), axis=1)
    df_boiry['D√©bit JAE_tot'] = df_boiry['D√©bit JAE A'] + df_boiry['D√©bit JAE B']
    df_boiry['D√©bit vapeur_tot'] = df_boiry['D√©bit vapeur 140T'] + df_boiry['D√©bit vapeur 120T']
    df_boiry['Energie kWh 0¬∞C_pci'] = df_boiry['Energie KWh 0¬∞C'] * 0.9
    df_boiry['Conso NRJ Usine (kwh/tcossette)'] = df_boiry['Energie kWh 0¬∞C_pci'] / df_boiry['Tonnage']
    df_boiry.reset_index(drop=True, inplace=True)
    return df_boiry

# Chargement du fichier utilisateur
st.title("üîç Pr√©diction de la Consommation d'√ânergie")
uploaded_file = st.file_uploader("üìÇ T√©l√©chargez votre fichier Excel", type=["xlsx"])

if uploaded_file is not None:
    data_boiry = pd.read_excel(uploaded_file)
    st.success("‚úÖ Fichier charg√© avec succ√®s !")
    st.dataframe(data_boiry.head())
    
    model_path = "xgb_model_cb22-23-24_10_param.joblib"
    scaler_path = "scaler_cb22-23-24_10_param.pkl"
    target_column = "Conso NRJ Usine (kwh/tcossette)"
    
    if st.button("üöÄ Lancer la pr√©diction"):
        with st.spinner("üìä Calcul en cours..."):
            df_results = process_boiry_data(data_boiry)
            st.success("‚úÖ Pr√©dictions termin√©es !")
            st.dataframe(df_results.head())
            
            # Affichage du graphique de distribution
            fig, ax = plt.subplots(figsize=(10, 5))
            sns.histplot(df_results[target_column], bins=20, kde=True, color='blue', ax=ax)
            ax.set_title("Distribution des Pr√©dictions de Consommation d'√ânergie")
            ax.set_xlabel("Consommation (kWh/tcossette)")
            ax.set_ylabel("Fr√©quence")
            st.pyplot(fig)
            
            # Bouton de t√©l√©chargement
            st.download_button(
                label="üíæ T√©l√©charger les r√©sultats",
                data=convert_df_to_excel(df_results),
                file_name="predictions.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
